# -*- coding: utf-8 -*-
"""Untitled4.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/11YnsDr3JNb6FWYLt2zrunzWHxYMS-Zle
"""

import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.preprocessing import OneHotEncoder, StandardScaler
from sklearn.compose import ColumnTransformer
from sklearn.pipeline import Pipeline
from sklearn.metrics import mean_squared_error
from sklearn.impute import SimpleImputer
from datetime import datetime
import joblib

from google.colab import files

uploaded = files.upload()

file_name = 'Salary Prediction of Data Professions.csv'
data = pd.read_csv(file_name)
data.head()

data['DOJ'] = pd.to_datetime(data['DOJ'])
data['CURRENT DATE'] = pd.to_datetime(data['CURRENT DATE'])

data['TENURE_DAYS'] = (data['CURRENT DATE'] - data['DOJ']).dt.days

data = data.drop(columns=['FIRST NAME', 'LAST NAME', 'DOJ', 'CURRENT DATE'])

data = data.fillna(method='ffill')

X = data.drop(columns=['SALARY'])
y = data['SALARY']

categorical_features = ['SEX', 'DESIGNATION', 'UNIT']
numerical_features = ['AGE', 'LEAVES USED', 'LEAVES REMAINING', 'RATINGS', 'PAST EXP', 'TENURE_DAYS']

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

preprocessor = ColumnTransformer(
    transformers=[
        ('num', StandardScaler(), numerical_features),
        ('cat', OneHotEncoder(), categorical_features)
    ])

model = Pipeline(steps=[
    ('preprocessor', preprocessor),
    ('regressor', LinearRegression())
])

model.fit(X_train, y_train)

y_pred_train = model.predict(X_train)
y_pred_test = model.predict(X_test)

train_mse = mean_squared_error(y_train, y_pred_train)
test_mse = mean_squared_error(y_test, y_pred_test)

print(f'Train MSE: {train_mse}')
print(f'Test MSE: {test_mse}')

joblib.dump(model, 'Salary_prediction_model.pkl')

results = X_test.copy()
results['Actual Salary'] = y_test
results['Predicted Salary'] = y_pred_test
results.to_csv('salary_predictions.csv', index=False)
results.head()